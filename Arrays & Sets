// Arrays
  // Task: Create an empty arrays named subwayAdult and subwayAdult of the type Int, then print them out.

  var subwayAdult = [Int]()      // RESULT: []
    print(subwayAdult)                      []
  var subwayChild = [Int]()
    print(subwayChild)

// Creating an Array Literal
  // Task #1: Create an array named subwayAdult and initialize it with 800, 1200, and 1500.

  var subwayAdult = [800, 1200, 1500]
    print(subwayAdult) 

  /* Task #2: Initialize subwayChild with 400, 600, and 750. This time, be explicit with the type, then print it out. */
                                                  // RESULT: [800, 1200, 1500]
  var subwayChild: [Int] = [400, 600, 750]                   [400, 600, 750]
    print(subwayChild)

// Index 
 // Task: Print the current temperature using its index.

  var temperature: [Int] = [66, 68, 72, 76, 80, 82, 85, 85, 84, 82, 81, 78, 74, 73, 72, 71, 70, 69, 68, 65, 63, 62, 61, 63]

  print(temperature[0])        // RESULT: 66

// The ".count" Property
  // Task: Print the size of the array using .count.        // RESULT: 20

  var countingRhyme = ["eeny", "meeny", "miny", "moe", "catch", "a", "coder", "by", "the", "toe", "if", "they", "debug", "let", "them", "go", "eeny", "meeny", "miny", "moe"]

  print(countingRhyme.count)

// The ".append" Method
  // Task #1: Add one more item to the resolutions array using .append().

    var resolutions = ["play more music üé∏",
                   "read more books üìö",
                   "drink more water üíß"]
    resolutions.append("Master Swift Programming")

  // Task #2: Add more to the resolutions array using +=.      // RESULT: ["play more music üé∏", "read more books üìö", "drink more water üíß", "Master Swift Programming", "Master iOS Programming", "Land my First Development Job"]

    resolutions += ["Master iOS Programming", "Land my First Development Job"]
    print(resolutions)

// The .insert() and .remove() Methods.
  // Task #1: Insert "GTG" at index 3.

    var dna = ["ATG", "ACG", "GAA", "TAT"]      // RESULT: ["ACG", "GAA", "GTG", "TAT"]
    dna.insert("GTG", at: 3)

  // Task #2: Remove the item at index 0.

    dna.remove(at: 0)
    print(dna)

// Iterating Over an Array
  // Task #1: create a variable called total of type Double and give it a value of 0.0.

    var receipt = [12.00, 3.75, 6.50, 19.99]
    var total: Double = 0.0
      for item in receipt {
        total += item
      }
  
  // Task #2: Change the value of total by multiplying itself by 1.08875.      // RESULT: 45.9888

    total = total * 1.08875
    print(total)

// Module Optional Challenge
  // Task: Write a Swift program to find the sum of even numbers and the product of odd numbers in an array.

    var list = [2, 4, 3, 6, 1, 9]      // RESULT: Sum of even numbers is 12
    var totalEven = 0                             Product of odd numbers is 27
    var productOdd = 1
      for item in list {
        if item % 2 == 0 {
          totalEven += item
        } else {
          productOdd *= item
        }
      }
    print("Sum of even numbers is \(totalEven)")
    print("Product of odd numbers is \(productOdd)")

// Arrays Module Project #1: Make a Mixtape 101
  // Write a program that holds the ultimate playlist of music in a Swift array.
    // Task #1: Write a comment at the top of the program with the theme of your mixtape.
      // The theme of my mixtake is Tokyo 90's Lofi.
        print(".------------------------.")
        print("| Tokyo Lofi 90's - 90 min |")
        print("|     __  ______  __     |")
        print("|    (  )|).....|(  )    |")
        print("|    (__)|)_____|(__)    |")
        print("|    ________________    |")
        print("|___/_._o________o_._\\___|")
    
    // Task #2: Declare an array called mixtape that stores String values.
        
        var mixtape = [String]()
   
    /* Task #3: Take some time to find ten or more songs that you want to add the playlist. As you are finding them, use .append() to add them to the mixtape array. */

        mixtape.append("Whispering Woods - Unknown")
        mixtape.append("Nostalgic Nights - Unknown")
        mixtape.append("Tranquil Twilight - Unknown")
        mixtape.append("Sunset Memories - Unknown")
        mixtape.append("Subtle Serenity - Unknown")
        mixtape.append("Velvet Veil - Unknown")
        mixtape.append("Soft Shadows - Unknown")
        mixtape.append("Serene Soundscape - Unknown")
        mixtape.append("Serenade of Silence - Unknown")
        mixtape.append("Reflections of Raindrops - Unknown")

    /* Task #4: Use the .count property to determine the number of songs in your mixtape. Wrap it in a print() statement to output that number. */

        print(mixtape.count)

    // Task #5: Use the .remove() method to take out one or two of the songs.

        mixtape.remove(at: 0)
        mixtape.remove(at: 6)                                                                // RESULT: .------------------------.
                                                                                                        | Tokyo Lofi 90's - 90 min |
    // Task #6: Use .remove() and .insert() methods to delete and add more tracks.                      |     __  ______  __     |
                                                                                                        |    (  )|).....|(  )    |
        mixtape.remove(at: 1)                                                                           |    (__)|)_____|(__)    |
        mixtape.remove(at: 4)                                                                           |    ________________    |
        mixtape.remove(at: 5)                                                                           |___/_._o________o_._\___|                       
        mixtape.insert("Nostalgic Nights - Unknown", at: 4)                                             10
        mixtape.insert("Ambient Aura - Unknown", at: 5)                                                 Nostalgic Nights - Unknown
        mixtape.insert("Reflections of Raindrops - Unknown", at: 1)                                     Reflections of Raindrops - Unknown
        mixtape.insert("Dreamy Vibes - Unknown", at: 3)                                                 Ethereal Echo - Unknown
        mixtape.insert("Ethereal Echo - Unknown", at: 2)                                                Sunset Memories - Unknown
                                                                                                        Dreamy Vibes - Unknown
    // Task #7: print out the tracklist using a for-in loop                                             Subtle Serenity - Unknown
                                                                                                        Velvet Veil - Unknown                                                                        
        for item in mixtape {                                                                           Nostalgic Nights - Uknown
          print(item)                                                                                   Ambient Aura - Unknown
        }                                                                                               Serenade of Silence - Unknown

// Arrays Module Project #2: Palindrome
  // Objective: Write a program that checks whether or not an array contains a palindrome.
    /* Task #1: create an array named text with the value: ["h", "e", "l", "l", "o"] */

      var text = ["h", "e", "l", "l", "l", "o"] 

    // Task #2: declare an empty array called reversed of type String. 

      var reversed = [String]()                                                // RESULT: This is not a palindrom!
  
    /* Task #3: create a counter variable that starts at 1 less than the size of text using the .count property. */

      var counter = text.count - 1
  
    /* Task #4: create a while loop that has the condition of counter greater than or equal to 0. 
    Before the decrement of the counter, add a line of code that appends the character in text at index counter to the end of reversed array. */

      while counter >= 0 {
        reversed.append(text[counter])
        counter = counter - 1
      }

    /* Task #5: Create a conditional that prints out ‚ÄúWe have a palindrome!‚Äù if text equals to reversed. */

      if text == reversed {
        print("We have a palindrome!")
      } else {
        print("This is not a palindrom!")

// Arrays Module Project #3: Caeser's Cipher
  // /* Objective: Write a program that encrypts a message by shifting each letter three places to the right. */

    var alphabet: [Character] = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"] 

    var secretMessage = "Codecademy".lowercased()

    var message = Array(secretMessage)
  
      for i in 0 ..< message.count {                // RESULT: ["f", "r", "g", "h", "f", "d", "g", "h", "p", "b"]
        for j in 0 ..< alphabet.count {
          if message[i] == alphabet[j] {
            message[i] = alphabet[(j+3) % 26]
            break
          }
        }
      }
    print(message)

// Creating a Set
  /* Task #1: Create an empty set called consonants with Character type values. */

  var consonants = Set<Character>()                                                    // RESULT: ["U", "O", "I", "E", "A"]

  /* Task #2: Create a second set called vowels that contains the following values: "A", "E", "I", "O", "U". Then, Output vowels to the terminal. */

  var vowels: Set = ["A", "E", "I", "O", "U"]
  print(vowels)

// .count and .isEmpty Properties
  /* Task #1: Create an if statement with a conditional that checks if sockDrawer is empty using .isEmpty.
        - Inside the if statement, print the output "Time to add some more socks!". */
      
  /* Task #2: Underneath the if statement, create an else statement. Then, print the following message inside the body of the else statement: We have [X] pairs of socks. */

      var sockDrawer: Set = ["Red Polka Dots", "Blue Stripes", "Plain Whites"]        // RESULT: We have 3 pairs of socks.
        if sockDrawer.isEmpty {
          print("Time to add some more socks!")
        } else {
          print("We have \(sockDrawer.count) pairs of socks.")
        }

// Inserting Elements
  /* Task: Add the value "Hermione" to the set friends using .insert(). */

    var friends: Set = ["Harry", "Ron"]
    print("There are some things you can't share without ending up liking each other, and defeating a twelve-foot mountain troll is one of them.")

    friends.insert("Hermione")            // RESULT: There are some things you can't share without ending up liking each other, and defeating a twelve-foot mountain troll is one of them.
                                                    Friends: ["Hermione", "Ron", "Harry"]
  /* Task #2: Add the value "Ron" to the set friends using .insert(). */

    friends.insert("Ron")

    print("Friends: \(friends)")

// Removing Elements
  /* Task #1: Remove the value "Pluto" from the set planets using .remove(), then print the value of planets */

    var planets: Set = ["Earth", "Jupiter", "Mars", "Neptune", "Saturn", "Venus", "Uranus", "Mercury", "Pluto"]

    planets.remove("Pluto")              // RESULT: ["Saturn", "Jupiter", "Mars", "Venus", "Uranus", "Neptune", "Mercury", "Earth"]
    print(planets)                                  []

  /* Task #2: Remove all the values from planets using .removeAll(), then print the value of planets again. */

    planets.removeAll()
    print(planets)

// Checking for Elements
  /* Task: Create an if/else statement that checks if "Blueberry" exists within the set coffeeFlavors using .contains()  
      - In the if, print "One blueberry coffee coming right up."
      - In the else, print "We do not serve that coffee flavor here." */

      var coffeeFlavors: Set = ["Caramel", "Mocha", "Pumpkin Spice", "Vanilla", "Blueberry"]

      if coffeeFlavors.contains("Blueberry") {                  // RESULT: One blueberry coffee coming right up.
        print("One blueberry coffee coming right up.")
      } else {
        print("We do not serve that coffee flavor here.")
      }

// Iterating Through a Set
  /* Task #1: Use a for-in loop to iterate through each element in the set thingsToPack, then name the placeholder item. */
  /* Task #2: Inside the body of the loop, use .insert() to add item to the set suitcase.
      - Outside the loop, print() the value of suitcase. */

    var thingsToPack: Set = ["Bathing Suit", "Clothes", "Sunglasses", "Sunscreen", "Favorite Book", "Phone Charger"]

    var suitcase = Set<String>()
                                      // RESULT: ["Sunglasses", "Sunscreen", "Bathing Suit", "Phone Charger", "Clothes", "Favorite Book"]
    for item in thingsToPack {
      suitcase.insert(item)
    }
    print(suitcase)

// Set Operations: .intersection()
  /* Task: Use .intersection() to create a set called swimAndFly that contains the shared values of swim and fly. Then, use print() to output swimAndFly. */

      var swim: Set = ["Turtles", "Ducks", "Puffins", "Shark"]
                                                                      // RESULT: ["Puffins", "Ducks"]
      var fly: Set = ["Humming birds", "Bats", "Ducks", "Puffins"]

      var swimAndFly = swim.intersection(fly)
      print(swimAndFly)

// Set Operations: .union()
  /* Create a set called alphabet that uses .union() to combine the values of the sets consonants and vowels.Then, use print() to output alphabet. */

    var consonants: Set = ["B", "C", "D", "F", "G", "H", "J", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "X", "Y", "Z"]

    var vowels: Set = ["A", "E", "I", "O", "U"]        // RESULT: ["Q", "E", "P", "S", "I", "U", "H", "X", "M", "T", "A", "C", "Z", "D", "K", "V", "W", "Y", "J", "B", "G", "N", "F", "L", "R", "O"]

    var alphabet = consonants.union(vowels)
    print(alphabet)

// Set Operations: .symmetricDifference()
  /* Task: Use .symmetricDifference() to create a set called difference that contains the values that appear in either oscarWinners or emmyWinners but do not appear in both sets. Then, Print the value of difference. */

    var oscarWinners: Set = ["Heath Ledger", "Rita Moreno", "Audrey Hepburn", "John Legend"]
    var emmyWinners: Set = ["Peter Dinklage", "John Legend", "Audrey Hepburn", "Rita Moreno"]

    var difference = oscarWinners.symmetricDifference(emmyWinners)        // RESULT: ["Peter Dinklage", "Heath Ledger"]
    print(difference)

// Set Operations: .subtracting()
 /* Task: Use the set operation .subtracting() to create a set called veggieEmojis that contains any element that is in the set foodEmojis but not in the set fruitEmojis. Then, print the value of veggieEmojis. */

    var foodEmojis: Set = ["ü•ï", "üçá", "üå∂Ô∏è", "üçí", "üçé", "ü•¶"]
    var fruitEmojis: Set = ["üçá", "üçé", "üçí"]
                                                                  // RESULT: ["üå∂Ô∏è", "ü•¶", "ü•ï"]
    var veggieEmojis = foodEmojis.subtracting(fruitEmojis)
    print(veggieEmojis)

// Sets Project: School Roster

  var spanish101: Set = ["Angela", "Declan", "Aldany", "Alex", "Sonny", "Alif", "Skyla"]
  var german101: Set = ["Angela", "Alex", "Declan", "Kenny", "Cynara", "Adam"]
  var advancedCalculus: Set = ["Cynara", "Gabby", "Angela", "Samantha", "Ana", "Aldany", "Galina", "Jasmine"]
  var artHistory: Set = ["Samantha", "Vanessa", "Aldrian", "Cynara", "Kenny", "Declan", "Skyla"]
  var englishLiterature: Set = ["Gabby", "Jasmine", "Alex", "Alif", "Aldrian", "Adam", "Angela"]
  var computerScience: Set = ["Galina", "Kenny", "Sonny", "Alex", "Skyla"]

  /* Task #1: Use the set operation .union() to combine all the students into one set called allStudents. */

    var allStudents = spanish101.union(german101).union(advancedCalculus).union(artHistory).union(englishLiterature).union(computerScience)

  /* Task #2: Use a for-in loop to iterate through allStudents and print() the name of each individual student. Then, use print() and .count() to output the total number of students. */

    for _ in allStudents {
      print("Angela", "Declan", "Aldany", "Alex", "Sonny", "Alif", "Skyla", "Kenny", "Adam", "Cynara", "Gabby", "Samantha", "Ana", "Galina", "Jasmine", "Vanessa", "Aldrian")
    }
    print(allStudents.count)
  
  /* Task #3: Create a set called noLanguage that contains the students who aren‚Äôt taking either german101 or spanish101 by using the .subtracting() operation. Then, output these names to the terminal. */

    var noLanguage = allStudents.subtracting(german101).subtracting(spanish101)
    print(noLanguage)

  /* Task #4: Use the set operation .symmetricDifference() to store the names of these students in a set called spanishOrGerman. Then, print spanishOrGerman to the output terminal. */

    var spanishOrGerman = spanish101.symmetricDifference(german101)
    print(spanishOrGerman)

   /* Task #5: Use the set operation .intersection() to create a set called languageAwardWinners that contains any students enrolled in all three classes. */

    var languageAwardWinners = spanish101.intersection(german101).intersection(englishLiterature)
    print(languageAwardWinners)

  /* Task #6: Create a variable called sevenPlus and give it a value of 0. */

    var sevenPlus = 0
  
  /* Task #7: Create a set called classSet that contains the set variable of each class. */

    var classSet: Set = [spanish101, german101, advancedCalculus, artHistory, englishLiterature, computerScience]

  /* Task #7: Use a for-in loop to iterate through each value in classSet.
      - Inside the for-in loop, create an if statement that checks if the number of students in each set exceeds 7 or more by using the .count property. */

    for aClass in classSet {
      if aClass.count >= 7 {
        sevenPlus += 1
      }
    } 
    print("There are \(sevenPlus) classes with seven or more students")

// RESULT: 
Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
Angela Declan Aldany Alex Sonny Alif Skyla Kenny Adam Cynara Gabby Samantha Ana Galina Jasmine Vanessa Aldrian
17
["Ana", "Galina", "Aldrian", "Vanessa", "Jasmine", "Gabby", "Samantha"]
["Kenny", "Aldany", "Skyla", "Sonny", "Cynara", "Adam", "Alif"]
["Alex", "Angela"]
There are 4 classes with seven or more students
