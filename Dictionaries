// Creating an Empty Dictionary
  /* Task #1: Declare an empty dictionary called emptyLiteral with String type keys and Int type values using dictionary literal syntax. */

    var emptyLiteral: [String: Int] = [:]

  /* Task #2: Declare an empty dictionary called emptyInitializer with String type keys and Bool type values using initializer syntax method. */

    var emptyInitializer = [String: Bool]()

// Creating a Dictionary Literal
  /* Task #1: Declare a dictionary variable named roleModels that contains String type keys and String type values using dictionary literal syntax. */
    
    var roleModels: [String: String] = [:]

  /* Task #2: Inside roleModels, add the following key-value pairs:
        - "Mr. Rogers": "Fred McFeely Rogers"
        - "The Crocodile Hunter": "Stephen Robert Irwin"
        - "Bill Nye the Science Guy": "William Sanford Nye" */
                                                                // RESULT: ["Bill Nye the Science Guy": "William Sanford Nye", "Mr. Rogers": "Fred McFeely Rogers", "The Crocodile Hunter": "Stephen Robert Irwin"]
    var roleModels: [String: String] = [                         
      "Mr. Rogers": "Fred McFeely Rogers",
      "The Crocodile Hunter": "Stephen Robert Irwin",
      "Bill Nye the Science Guy": "William Sanford Nye"
    ]
    print(roleModels)

// Type Inference
  /* Task: Declare a dictionary called movieYears using type inference syntax including the following key-value pairs in movieYears:
            - "Finding Nemo": 2003
            - "Toy Story": 1995 */
    var movieYears = [                          // RESULT: ["Finding Nemo": 2003, "Toy Story": 1995]
      "Finding Nemo": 2003,
      "Toy Story": 1995
    ]
    print(movieYears)

// Adding Elements
  /* Task: Add the following key-value pairs to teaSteepingTemperature, then use print()
      - "Green": 185
      - "Rooibos": 212 */

    var teaSteepingTemperature = [
      "Black": 212,
      "Oolong": 185,
      "White": 185                            // RESULT: ["Rooibos": 212, "Oolong": 185, "White": 185, "Green": 185, "Black": 212]
    ]

    teaSteepingTemperature["Green"] = 185
    teaSteepingTemperature["Rooibos"] = 212
    print(teaSteepingTemperature)

// Updating Elements
  /* Task #1: Modify the value paired with the key "LOL" to be the correct term "Laugh Out Loud" using subscript syntax. */

    var abbreviations = [
      "LOL": "Laboring Over Latkes",
      "LMK": "Let Me Know",
      "BRB": "Bringing Radishes Back",
      "GJOYC": "Great Job On Your Code"
    ]                                              // RESULT: ["LOL": "Laugh Out Loud", "BRB": "Be Right Back", "GJOYC": "Great Job On Your Code", "LMK": "Let Me Know"]
    abbreviations["LOL"] = "Laugh Out Loud"
  
  /* Task #2: Use the .updateValue() method to change the value associated with the key "BRB" to "Be Right Back". */

    abbreviations.updateValue("Be Right Back", forKey: "BRB")
    print(abbreviations)

// Removing Elements
  /* Task #1: Remove the key-value pair "maroon": "#800000" from rainbowHex using nil. */

    var rainbowHex = [
      "red": "#ff0000",
      "pink": "#ffc0cb",
      "yellow": "#ffff00",
      "maroon": "#800000",
      "green":  "#00ff00",
      "blue": "#0000ff",
      "violet": "#ee82ee"
    ]
    rainbowHex["maroon"] = nil
  
  /* Task #2: Remove the key-value pair "pink": "#ffc0cb" from rainbowHex using the .removeValue() method. */

    rainbowHex.removeValue(forKey: "pink")
  
  /* Task #3: Remove all the elements from rainbowHex using .removeAll(). */

    rainbowHex.removeAll()                // RESULT: [:]

    print(rainbowHex)

// Inspecting a Dictionary
 /* Task #1: Create an if statement that checks if numberOfSides is empty using .isEmpty. */
 /* Task #2: Add an else statement underneath the if statement you just created. */ 

  var numberOfSides = [
    "triangle": 3,
    "square": 4,
    "rectangle": 4,
    "decagon": 10,
    "triacontagon": 30
  ]                            // RESULT: 5
  if numberOfSides.isEmpty {
    print("This dictionary has no elements in it.")
  } else {
    print(numberOfSides.count)
  }

// Accessing Values
  /* Task #1: Assign the value associated with the key "Sunflower" in the dictionary flowerNames to a variable called sunflowerScientific using subscript syntax. Then, output the value of sunflowerScientific using print(). */
  /* Task #2: Modify your code to unwrap the value of sunflowerScientific by appending ! to the code written in Instruction 1. */
  
    var flowerNames = [
      "Lily": "Lilium",                
      "Sunflower": "Helianthus", 
      "Orchid": "Orchidaceae", 
      "Daffodil": "Narcissus"
    ]                                                      // RESULT: Helianthus
    var sunflowerScientific = flowerNames["Sunflower"]!               A lily is referred to as a Lilium in the science community.
    print(sunflowerScientific)

  /* Use an if-let statement to assign the value associated with the key "Lily" to a variable called lilyScientific. Then, inside the body of the if statement, print() the following statement: A lily is referred to as a \(lilyScientific) in the science community. */

    if let lilyScientific = flowerNames["Lily"] {
      print("A lily is referred to as a \(lilyScientific) in the science community.")
    }  

// Iterating through a Dictionary
  /* Task #1: iterate through the keys and values of the dictionary mythology using a for-in loop.
      - Name the key placeholder greekName.
      - Name the value placeholder romanName. */
  /* Task #2: In the body of the loop, use print() to output the following statement: [greekName] is also known as [romanName] */
    
    var mythology = [
      "Zeus": "Jupiter",
      "Athena": "Minerva",             // RESULT: Poseidon is also known as Neptune
      "Poseidon": "Neptune",                      Demeter is also known as Ceres
       "Demeter": "Ceres"]                        Zeus is also known as Jupiter
                                                  Athena is also known as Minerva
    
    for (greekName, romanName) in mythology {
      print("\(greekName) is also known as \(romanName)")
    }

// Using .keys and .values
  /* Task #1: Underneath the declaration of total, create a for-in loop that iterates only through the values of the dictionary lemonadeStand. Then, name the placeholder monthlyProfit and leave the body of the for-in loop empty. */
  /* Task #2: In the body of the loop, increase the value of total by the value of monthlyProfit. */

    var lemonadeStand = [
      "April": 8.50,
      "May": 12.75,
      "June": 22.50,
      "July": 38.25, 
      "August": 32.50,
      "September": 11.50
    ]
                                  // RESULT: Total profits are 126.0
    var total: Double = 0.0

    for monthlyProfit in lemonadeStand.values {
      total += monthlyProfit
    }

    print("Total profits are \(total)")

// Dictionaries Module Project: Morse Decoder
  /* Objective: write a program that uses dictionaries to encrypt and decrypt secret Morse code messages. */

    var englishText = "this is a secret message"
    var secretMessage = ".... --- .-- -.. -.--   .--. .- .-. - -. . .-."
  /* Task #1: Create a dictionary called letterToMorse that stores individual letters of the alphabet as String type keys and their morse counterpart as String type values. */

    var letterToMorse: [String: String] = [
      "a": ".-",
      "b": "-...",
      "c": "-.-.",
      "d": "-..",
      "e": ".",
      "f": "..-.",
      "g": "--.",
      "h": "....",
      "i": "..",
      "j": ".---",
      "k": "-.-",
      "l": ".-..",
      "m": "--",
      "n": "-.",
      "o": "---",
      "p": ".--.",
      "q": "--.-",
      "r": ".-.",
      "s": "...",
      "t": "-",
      "u": "..-",
      "v": "...-",
      "w": ".--",
      "x": "-..-",
      "y": "-.--",
      "z": "--.."
    ]
  /* Task #2: Create an empty String called morseText. This value will store the encrypted message. */

    var morseText = ""
  
  /* Task #3: Use a for-in loop to iterate through each character in englishText, and name the placeholder element. */
  /* Task #4: Inside the for-in loop, create an if-let statement that assigns a variable called morseChar to the value of a key in the dictionary letterToMorse. The key that will be used is the placeholder value element. */
  /* Task #5: Inside the body of the if-let statement, modify morseText by appending morseChar as well as a space " " to the end of the value. */
  /* Task #6: Create an else statement. Inside the else statement, modify morseText by appending three spaces " " to the end of the value to represent the space between new words. */
  /* Task #7: Outside of the for-in loop, use print() to output morseText. */

    for element in englishText {
      if let morseChar = letterToMorse["\(element)"] {
        morseText += morseChar + " "
      } else {
        morseText += "   "
      }
    }
    print(morseText)
  
  // Task #8: Create an empty String called decodedMessage.

    var decodedMessage = ""
  
  // Task #9: Create an empty String array called morseCodeArray.

    var morseCodeArray = [String]()
  
  // Task #10: Create an empty String called currMorse.

    var currMorse = ""

  /* Task #11: Create a for-in loop that iterates through secretMessage. Then, name the placeholder value char. */
  /* Task #12: Create an if statement that executes when the value of char is not a space " ". Then, inside the if statement, append the value of char to currMorse. */
  /* Task #13: Create an else statement. Then, Inside of the else statement, create a switch statement accepts currMorse as its expression. */ 
  /* Task #14: Inside the switch statement, set up the following cases:
      - Case 1: The value of currMorse is "":
        - Append a space " " to currMorse.
      - Case 2: The value of currMorse is " ":
        - Append a space " " to morseCodeArray.
        - Set the value of currMorse to "".
      - Default Case:
        - Append the value of currMorse to morseCodeArray.
        - Set the value of currMorse to "". */ 

    for char in secretMessage {
      if char !=  " " {
        currMorse.append(char)
      } else {
        switch currMorse {
          case "":
            currMorse += " "
          case " ":
            morseCodeArray.append(" ")
            currMorse = ""
          default:
            morseCodeArray.append(currMorse)
            currMorse = ""
        }
      }
    }
  
  /* Task #15: Outside of the for-in loop, finish populating morseCodeArray by appending currMorse. Then, print the value of morseCodeArray to see each Morse code letter contained as an individual element. */

    morseCodeArray.append(currMorse)
    print(morseCodeArray)

  // Task #16: Create an empty dictionary called morseToLetter with String type keys and String type values. 

    var morseToLetter = [String: String]()

  /* Task #17: Create a for-in loop that iterates through the keys and the values of the letterToMorse dictionary. Then, name the key placeholder letter and the values placeholder morseChar. */
  /* Task #18: In the body of the loop, add a key-value pair to morseToLetter with morseChar as the key and letter as the value. Outside of the loop, output the value of morseToLetter to check if all the values look correct. If everything looks okay, feel free to delete this print() statement. */

    for (letter, morseChar) in letterToMorse {
      morseToLetter[morseChar] = letter
    }
    print(morseToLetter)

  // Task #19: Create a for-in loop that iterates through morseCodeArray. Name the place holder morseValue.
  /* Task #20: Create an if-let statement that declares a letterChar variable that stores the value of morseToLetter[morseValue] only if the morseToLetter dictionary contains a key of morseValue. */
  // Task #21: In the body of the if-let statement, append the value of letterChar to decodedMessage.
  /* Task #22: Add an else statement underneath the newly created if-let statement. In the body of the else statement, append a space to the end of decodedMessage. */

    for morseValue in morseCodeArray {
      if let letterChar = morseToLetter[morseValue] {
        decodedMessage += letterChar
      } else {                                                            // RESULT: Howdy partner
        decodedMessage += " "
      }
    }
    print(decodedMessage)
